<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckConstraintQuery" xml:space="preserve">
    <value>SELECT  Name,
 OBJECT_DEFINITION(object_id) AS Definition, is_not_trusted as IsNoCheck
 FROM    sys.Check_constraints
WHERE OBJECT_SCHEMA_NAME(parent_object_id) = '{1}' and OBJECT_NAME(parent_object_id) = '{0}'</value>
    <comment>{0} - tableName, {1} - schemaName</comment>
  </data>
  <data name="DatabaseQuery" xml:space="preserve">
    <value>SELECT name AS Name FROM sys.databases</value>
  </data>
  <data name="DefaultConstraintQuery" xml:space="preserve">
    <value>SELECT  
OBJECT_NAME(default_object_id) AS Name ,
c.Name AS ColumnName ,
OBJECT_DEFINITION(default_object_id) AS DefaultValue
FROM    sys.Tables t
INNER JOIN sys.columns c ON t.object_id = c.object_id
WHERE    default_object_id &lt;&gt; 0 and t.name = '{0}' and SCHEMA_NAME(t.schema_id) = '{1}'</value>
    <comment>{0} - tableName, {1} - schemaName</comment>
  </data>
  <data name="ForeignKeyQuery" xml:space="preserve">
    <value>SELECT  f.name AS Name, 
COL_NAME(fc.parent_object_id, fc.parent_column_id) AS ColumnName,
OBJECT_NAME(f.referenced_object_id) AS ReferenceTableName,
OBJECT_SCHEMA_NAME(f.referenced_object_id) AS ReferencedSchema,  
COL_NAME(fc.referenced_object_id, fc.referenced_column_id) AS ReferenceColumnName, 
f.is_not_trusted AS IsNocheck into #Temp 
FROM sys.foreign_keys AS f 
INNER JOIN sys.foreign_key_columns AS fc ON f.OBJECT_ID = fc.constraint_object_id 
INNER JOIN sys.objects AS o ON o.OBJECT_ID = fc.referenced_object_id 
WHERE SCHEMA_NAME(f.schema_id) = '{0}' and OBJECT_NAME(f.parent_object_id) = '{1}' 
SELECT DISTINCT Name, ReferenceTableName, ReferencedSchema, 
STUFF((SELECT N',' + ColumnName FROM #Temp as t2 WHERE t2.Name = #Temp.name 
for xml path('')  ,type  ).value('.','nvarchar(max)'), 1,1,'') as ColumnName, 
STUFF((SELECT N',' + ReferenceColumnName FROM #Temp as t2 WHERE t2.Name = #Temp.Name 
for xml path('')  ,type  ).value('.','nvarchar(max)'), 1,1,'') as ReferenceColumnName,
IsNoCheck
FROM #Temp
DROP TABLE #Temp</value>
    <comment>{0} - schemaName, {1} - tableName</comment>
  </data>
  <data name="FunctionQuery" xml:space="preserve">
    <value>SELECT SPECIFIC_NAME AS Name, 
ROUTINE_DEFINITION AS Definition,
stuff 
((SELECT DISTINCT N',' + o.name, '('+ o.type_desc + ')'
FROM sys.dm_sql_referenced_entities ('{0}' +'.'+ isr.SPECIFIC_NAME, 'OBJECT') AS ref
JOIN sys.objects AS o ON ref.referenced_id = o.[object_id]
WHERE o.[type] IN ('U', 'V')
for xml path(''),type).value('.','nvarchar(max)'), 1,1,'' ) AS Tables
FROM information_schema.routines AS isr
WHERE routine_type = 'FUNCTION' 
and Left(Routine_Name, 3) NOT IN ('sp_', 'xp_', 'ms_')
and ROUTINE_SCHEMA = '{0}'</value>
    <comment>{0} - schemaName</comment>
  </data>
  <data name="IndexQuery" xml:space="preserve">
    <value>SELECT  ind.name AS Name, col.name as ColumnName, ind.is_unique as IsUnique, ind.index_id, ind.type_desc as Type 
INTO #Temp 
FROM sys.indexes ind 
INNER JOIN sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id 
INNER JOIN sys.tables t ON ind.object_id = t.object_id 
INNER JOIN sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id 
WHERE ind.is_primary_key = 0 AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0 
AND t.name = '{1}' AND OBJECT_SCHEMA_NAME(t.object_id) = '{0}' 
SELECT DISTINCT Name, IsUnique, 
stuff((SELECT N',' + ColumnName FROM #Temp as temp2 WHERE temp2.index_id = #Temp.index_id 
for xml path('')  ,type  ).value('.','nvarchar(max)'), 1,1,'') as ColumnName, Type
 FROM #Temp DROP TABLE #Temp</value>
    <comment>{0} - schemaName, {1} - tableName</comment>
  </data>
  <data name="OneDbQuery" xml:space="preserve">
    <value>SELECT name AS Name FROM sys.databases WHERE name = '{0}'</value>
  </data>
  <data name="ParameterQuery" xml:space="preserve">
    <value>SELECT PARAMETER_NAME AS Name,
DATA_TYPE AS TypeName, CHARACTER_MAXIMUM_LENGTH AS MaxLength,
NUMERIC_PRECISION AS Precision,
NUMERIC_PRECISION_RADIX AS PrecisionRadix, 
NUMERIC_SCALE AS Scale
FROM INFORMATION_SCHEMA.PARAMETERS
WHERE Left(SPECIFIC_NAME, 3) NOT IN ('sp_', 'xp_', 'ms_', 'fn_')
AND SPECIFIC_SCHEMA = '{0}' AND SPECIFIC_NAME = '{1}'</value>
    <comment>{0} - schemaName, {1} - procedureName</comment>
  </data>
  <data name="PrimaryKeyQuery" xml:space="preserve">
    <value>SELECT i.name as Name, COL_NAME(ic.[object_id], ic.column_id) as ColumnName, i.type_desc as 'Type'  into #Temp 
FROM sys.indexes AS i 
JOIN sys.index_columns AS ic  ON i.[object_id] = ic.[object_id]  
AND i.index_id = ic.index_id 
WHERE i.is_primary_key = 1 
AND i.[object_id] = object_id('{0}.{1}', 'U') 
SELECT DISTINCT #Temp.Name , 
STUFF((SELECT N',' + ColumnName FROM #Temp AS t2 WHERE t2.Name = #Temp.Name 
for xml path('')  ,type  ).value('.','nvarchar(max)'), 1,1,'') AS ColumnName, Type FROM #Temp
 DROP TABLE #Temp</value>
    <comment>{0} - schemaName, {1} - tableName</comment>
  </data>
  <data name="ProcedureQuery" xml:space="preserve">
    <value>SELECT SPECIFIC_NAME AS Name, 
ROUTINE_DEFINITION AS Definition,
stuff 
((SELECT DISTINCT N',' + o.name, '('+ o.type_desc + ')'
FROM sys.dm_sql_referenced_entities ('{0}' +'.'+ isr.SPECIFIC_NAME, 'OBJECT') AS ref
JOIN sys.objects AS o ON ref.referenced_id = o.[object_id]
WHERE o.[type] IN ('U', 'V')
for xml path(''),type).value('.','nvarchar(max)'), 1,1,'' ) AS Tables
FROM information_schema.routines AS isr
WHERE routine_type = 'PROCEDURE' 
and Left(Routine_Name, 3) NOT IN ('sp_', 'xp_', 'ms_')
and ROUTINE_SCHEMA = '{0}'</value>
    <comment>{0} - schemaName</comment>
  </data>
  <data name="SchemaQuery" xml:space="preserve">
    <value>SELECT SCHEMA_NAME as Name 
FROM INFORMATION_SCHEMA.SCHEMATA 
WHERE SCHEMA_OWNER = 'dbo'</value>
  </data>
  <data name="TableColumnQuery" xml:space="preserve">
    <value>SELECT c.name as Name, tp.name AS Type, c.max_length as MaxLength, c.[precision] AS Precision, c.scale as Scale,
 c.is_nullable as IsNullable, c.is_identity AS IsIdentity, c.is_rowguidcol AS IsRowguidCol,
  (SELECT name FROM sys.schemas AS sch WHERE tp.schema_id = sch.schema_id) AS SchemaName 
    , SeedValue = CASE WHEN c.is_identity = 1 THEN IDENTITYPROPERTY(c.[object_id], 'SeedValue') END  
    , IncrementValue = CASE WHEN c.is_identity = 1 THEN IDENTITYPROPERTY(c.[object_id], 'IncrementValue') END    
    , ComputedDefinition = OBJECT_DEFINITION(c.[object_id], c.column_id)
    , DefaultDefinition = OBJECT_DEFINITION(c.default_object_id)  
FROM sys.columns AS c
JOIN sys.types AS tp  ON c.user_type_id = tp.user_type_id  
JOIN sys.objects AS so ON so.object_id = c.object_id
JOIN sys.schemas AS s ON so.[schema_id] = s.[schema_id] 
WHERE c.[object_id] = OBJECT_ID('{0}.{1}', 'U') and s.name = '{0}'</value>
    <comment>{0} - schemaName, {1} - tableName</comment>
  </data>
  <data name="TableQuery" xml:space="preserve">
    <value>SELECT TABLE_NAME AS Name 
FROM INFORMATION_SCHEMA.TABLES
WHERE (TABLE_SCHEMA = '{0}' and TABLE_TYPE = 'BASE TABLE')</value>
    <comment>{0} - schemaName</comment>
  </data>
  <data name="TriggerQuery" xml:space="preserve">
    <value>SELECT	o.name as Name, sm.definition as Definition
FROM    sys.objects AS o
INNER JOIN sys.sql_modules sm ON o.object_id = sm.OBJECT_ID
WHERE   o.Type = 'TR' AND OBJECT_NAME(Parent_object_id) = '{1}' 
AND OBJECT_SCHEMA_NAME(Parent_object_id) = '{0}'</value>
    <comment>{0} - schemaName, {1} - tableName</comment>
  </data>
  <data name="TypeQuery" xml:space="preserve">
    <value>SELECT t.name AS Name, ss.name AS SchemaName, max_length as MaxLength, precision AS Precision, scale AS Scale, is_nullable as IsNullable, 
(SELECT name FROM sys.types AS tt WHERE t.system_type_id = tt.user_type_id) AS Type 
FROM sys.types AS t
INNER JOIN sys.schemas as ss ON ss.schema_id = t.schema_id 
WHERE is_user_defined = 1</value>
  </data>
  <data name="UseDbQuery" xml:space="preserve">
    <value>USE [{0}]</value>
  </data>
  <data name="ViewColumnQuery" xml:space="preserve">
    <value>SELECT COLUMN_NAME AS Name FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}' AND TABLE_SCHEMA = '{1}'</value>
    <comment>{0} - viewName , {1} - schemaName</comment>
  </data>
  <data name="ViewQuery" xml:space="preserve">
    <value>SELECT so.name as Name, sm.definition as Definition, stuff 
((SELECT DISTINCT N','+ isc.TABLE_NAME + N'('+ (SELECT TABLE_TYPE FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_NAME = isc.TABLE_NAME
) +N')' 
FROM INFORMATION_SCHEMA.VIEW_COLUMN_USAGE as isc where isc.VIEW_NAME = so.name 
for xml path('')  ,type  ).value('.','nvarchar(max)'), 1,1,'')
as Tables 
FROM sys.objects AS so
INNER JOIN sys.schemas AS ss ON so.schema_id = ss.schema_id
INNER JOIN sys.sql_modules AS sm ON so.object_id = sm.OBJECT_ID
WHERE so.type ='V' and SCHEMA_NAME(so.schema_id) = '{0}'</value>
    <comment>{0} - schemaName</comment>
  </data>
</root>